{"version":3,"sources":["components/Header.js","components/AddTask.js","components/ToggleButton.js","components/Task.js","components/ToggleList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","AddTask","props","showLargeScreen","onAdd","onDone","useState","name","setName","date","setDate","time","setTime","className","onSubmit","e","hours","minutes","newDate","newTime","preventDefault","toString","split","getHours","getMinutes","alert","type","placeholder","value","onChange","target","placeholderText","selected","dateFormat","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","onClick","ToggleButton","onToggle","style","textAlign","color","fontSize","Task","task","updateStatus","onDelete","status","id","ToggleList","listName","listTitle","noTasksTitle","tasks","showList","setShowList","length","map","App","window","innerWidth","showAddTask","setShowAddTask","setShowLargeScreen","taskCounter","setTaskCounter","completedTasks","setCompletedTasks","pendingTasks","setPendingTasks","useEffect","data","completed","pending","forEach","push","addEventListener","checkWindowSize","removeEventListener","size","changeFormDisplay","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAQeA,EARA,WACX,OACI,iCACI,iD,iBC0FGC,G,MAxFC,SAACC,GAAW,IACjBC,EAAkCD,EAAlCC,gBAAiBC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,OADR,EAGCC,mBAAS,IAHV,mBAGhBC,EAHgB,KAGVC,EAHU,OAICF,mBAAS,MAJV,mBAIhBG,EAJgB,KAIVC,EAJU,OAKCJ,mBAAS,MALV,mBAKhBK,EALgB,KAKVC,EALU,KAwCvB,OACA,sBAAKC,UAAU,iBAAf,UACGV,GAAmB,oBAAIU,UAAU,iBAAd,sBACpB,uBAAMA,UAAU,WAAWC,SApCZ,SAACC,GAChB,IAAIC,EAAOC,EAAU,EACjBC,EAAU,GACVC,EAAU,GAEdJ,EAAEK,iBAEEb,GAIDE,IACDS,EAAUT,EAAKY,WAAWC,MAAM,KAChCJ,EAAO,UAAMA,EAAQ,GAAd,YAAoBA,EAAQ,GAA5B,aAAmCA,EAAQ,KAEjDP,IACDK,EAAUL,EAAKY,WACfN,EAAUN,EAAKa,aAGbL,EADCH,EAAQ,GACF,UAAMA,EAAM,GAAZ,YAAkBC,EAAlB,OAEA,UAAMD,EAAN,YAAeC,EAAf,QAIXb,EAAM,CAACG,KAAKA,EAAME,KAAKS,EAASP,KAAKQ,IAErCX,EAAQ,IACRE,EAAQ,MACRE,EAAQ,OAtBJa,MAAM,+CA4BV,UACE,sBAAKZ,UAAU,4BAAf,UACE,uBACEa,KAAK,OACLC,YAAY,YACZC,MAAOrB,EACPsB,SAAU,SAACd,GAAD,OAAOP,EAAQO,EAAEe,OAAOF,UAEpC,uBAAOf,UAAU,QAAjB,8BAEF,sBAAKA,UAAU,4BAAf,UACE,cAAC,IAAD,CACEkB,gBAAgB,cAChBC,SAAUvB,EACVoB,SAAU,SAAApB,GAAI,OAAIC,EAAQD,IAC1BwB,WAAW,iBAEb,uBAAOpB,UAAU,QAAjB,qBAEF,sBAAKA,UAAU,4BAAf,UACE,cAAC,IAAD,CACEkB,gBAAgB,cAChBC,SAAUrB,EACVkB,SAAU,SAAApB,GAAI,OAAIG,EAAQH,IAC1ByB,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACfC,YAAY,OACZJ,WAAW,YAEb,uBAAOpB,UAAU,QAAjB,qBAGF,uBAAOa,KAAK,SAASE,MAAM,WAAWf,UAAU,iBAC9CV,GACF,uBACEuB,KAAK,SACLE,MAAM,SACNf,UAAU,iBACVyB,QAASjC,Y,OCjEJkC,EApBM,SAACrC,GAAW,IACtBsC,EAAYtC,EAAZsC,SAEP,OACI,0BAAS3B,UAAU,iBAAiByB,QAASE,EAA7C,UACI,wBACAd,KAAK,SACLb,UAAU,iBACVyB,QAASE,EAHT,SAII,cAAC,IAAD,CAAQC,MAAO,CACXC,UAAW,SACXC,MAAO,WACPC,SAAU,cAGlB,uBAAO/B,UAAU,cAAjB,4BCkBGgC,EAjCF,SAAC3C,GAAW,IACb4C,EAAiC5C,EAAjC4C,KAAMC,EAA2B7C,EAA3B6C,aAAcC,EAAa9C,EAAb8C,SAmB5B,OACI,sBAAKnC,UAAU,iBAAf,UACI,wBAAQA,UAAWiC,EAAKG,OAAS,oBAAsB,eAC/CX,QApBO,WACnBS,EAAaD,EAAKI,KAkBd,SAEI,cAAC,IAAD,CAASrC,UAAU,qBAEvB,uBAAOA,UAAU,YAAjB,SAA8BiC,EAAKvC,OACnC,wBAAOM,UAAU,YAAjB,UAnBDiC,EAAKrC,MAAQqC,EAAKnC,KACX,GAAN,OAAUmC,EAAKrC,KAAf,eAA0BqC,EAAKnC,MAEhCmC,EAAKrC,OAASqC,EAAKnC,KACZ,GAAN,OAAUmC,EAAKrC,OAEfqC,EAAKrC,MAAQqC,EAAKnC,KACZ,MAAN,OAAamC,EAAKnC,MAEf,4BAUH,OACA,cAAC,IAAD,CAASE,UAAU,iBAAiByB,QAAS,kBAAMU,EAASF,EAAKI,WCG9DC,EA5BI,SAACjD,GAAW,IACnBkD,EAAqElD,EAArEkD,SAAUC,EAA2DnD,EAA3DmD,UAAWC,EAAgDpD,EAAhDoD,aAAcC,EAAkCrD,EAAlCqD,MAAOR,EAA2B7C,EAA3B6C,aAAcC,EAAa9C,EAAb8C,SADtC,EAGM1C,oBAAS,GAHf,mBAGnBkD,EAHmB,KAGTC,EAHS,KAK1B,OACI,qBAAK5C,UAAWuC,EAAhB,SACI,0BAASvC,UAAS,eAAlB,UACI,qBAAIA,UAAU,cAAd,cAA+BwC,EAA/B,OACA,wBACAxC,UAAU,oBACVyB,QAAS,kBAAMmB,GAAaD,IAF5B,SAGKA,EACD,cAAC,IAAD,CAAW3C,UAAU,cACrB,cAAC,IAAD,CAAaA,UAAU,gBAE1B2C,GACD,qBAAK3C,UAAU,gBAAf,SACK0C,EAAMG,OAAS,EAChBH,EAAMI,KAAI,SAACb,GACP,OAAO,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,aAAcA,EAAcC,SAAUA,GAA3DF,EAAKI,OACtB,oBAAIrC,UAAU,aAAd,SAA4ByC,YCiGtCM,MApHf,WAAgB,IAAD,EACyBtD,mBAASuD,OAAOC,WAAa,KADtD,mBACNC,EADM,KACOC,EADP,OAEiC1D,mBAASuD,OAAOC,WAAa,KAF9D,mBAEN3D,EAFM,KAEW8D,EAFX,OAGyB3D,mBAAS,GAHlC,mBAGN4D,EAHM,KAGOC,EAHP,OAI8B7D,mBAAS,IAJvC,mBAIP8D,EAJO,KAISC,EAJT,OAK0B/D,mBAAS,IALnC,mBAKPgE,EALO,KAKOC,EALP,KAObC,qBAAU,WACR,IAAMC,EAAO,CACb,CAACvB,GAAI,EAAGD,QAAO,EAAO1C,KAAM,eAAgBE,KAAK,cAAeE,KAAK,YACrE,CAACuC,GAAI,EAAGD,QAAO,EAAO1C,KAAM,aAAcE,KAAK,cAAeE,KAAK,YACnE,CAACuC,GAAI,EAAGD,QAAO,EAAM1C,KAAM,aAAcE,KAAK,cAAeE,KAAK,YAG9D+D,EAAY,GACZC,EAAU,GAEdF,EAAKG,SAAQ,SAAC9B,GACZA,EAAKG,OAASyB,EAAUG,KAAK/B,GAAQ6B,EAAQE,KAAK/B,MAGpDqB,EAAeM,EAAKf,QACpBW,EAAkBK,GAClBH,EAAgBI,KACf,IAEHH,qBAAU,WAGR,OAFAX,OAAOiB,iBAAiB,SAAUC,GAE3B,WACLlB,OAAOmB,oBAAoB,SAAUD,OAIzC,IAAMA,EAAkB,WACtB,IAAME,EAAOpB,OAAOC,WAAa,IAEjCE,EAAeiB,GACfhB,EAAmBgB,IAgDfC,EAAoB,WACxBlB,GAAgBD,IAGlB,OACE,sBAAKlD,UAAU,MAAf,UACE,cAAC,EAAD,IAECkD,EACA,cAAC,EAAD,CAAS5D,gBAAiBA,EAAiBC,MArDhC,SAAC0C,GACf,IAAII,EAAKgB,EAAc,EAGvBC,EAAejB,GAEfqB,EAAgB,GAAD,mBAAKD,GAAL,cAAoBpB,KAAID,QAJxB,GAImCH,OA+CYzC,OAAQ6E,IACnE,cAAC,EAAD,CAAc1C,SAAU0C,IAEzB,cAAC,EAAD,CACE9B,SAAU,eACVC,UAAW,WACXC,aAAc,yBACdC,MAAOe,EACPvB,aAnDwB,SAACG,GAC7BqB,EAAgBD,EAAaa,QAAO,SAACrC,GACnC,OAAGA,EAAKI,KAAOA,GACbJ,EAAKG,QAAUH,EAAKG,OACpBoB,EAAkB,GAAD,mBAAKD,GAAL,CAAqBtB,KAC/B,MAEFA,OA6CLE,SA5BoB,SAACE,GACzBqB,EAAgBD,EAAaa,QAAO,SAACrC,GAAD,OAAUA,EAAKI,KAAOA,SA4BxD,cAAC,EAAD,CACEE,SAAU,iBACVC,UAAW,YACXC,aAAc,+BACdC,MAAOa,EACPrB,aA9C0B,SAACG,GAC/BmB,EAAkBD,EAAee,QAAO,SAACrC,GACvC,OAAGA,EAAKI,KAAOA,GACbJ,EAAKG,QAAUH,EAAKG,OACpBsB,EAAgB,GAAD,mBAAKD,GAAL,CAAmBxB,KAC3B,MAEFA,OAwCLE,SA9BsB,SAACE,GAC3BmB,EAAkBD,EAAee,QAAO,SAACrC,GAAD,OAAUA,EAAKI,KAAOA,aC7EnDkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8ccbaeb9.chunk.js","sourcesContent":["const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Task Tracker</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState } from 'react'\r\nimport DatePicker from \"react-datepicker\"\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nconst AddTask = (props) => {\r\n    const {showLargeScreen, onAdd, onDone} = props\r\n\r\n    const [name, setName] = useState('')\r\n    const [date, setDate] = useState(null)\r\n    const [time, setTime] = useState(null)\r\n\r\n    const onSubmit = (e) => {\r\n      var hours, minutes = 0\r\n      var newDate = ''\r\n      var newTime = ''\r\n\r\n      e.preventDefault()\r\n\r\n      if(!name) {\r\n          alert('Please add a task name to create new task.')\r\n          return\r\n      }\r\n      if(date) {\r\n        newDate = date.toString().split(\" \")\r\n        newDate = `${newDate[1]} ${newDate[2]}, ${newDate[3]}`\r\n      }\r\n      if(time) {\r\n        hours   = time.getHours()\r\n        minutes = time.getMinutes()\r\n\r\n        if(hours > 12) {\r\n          newTime = `${hours-12}:${minutes} pm`\r\n        } else {\r\n          newTime = `${hours}:${minutes} am`\r\n        }\r\n      }\r\n\r\n      onAdd({name:name, date:newDate, time:newTime})\r\n\r\n      setName('')\r\n      setDate(null)\r\n      setTime(null)\r\n    }\r\n\r\n    return ( \r\n    <div className='form-container'>\r\n      {showLargeScreen && <h2 className='add-task-title'>Add task</h2>}\r\n      <form className='add-form' onSubmit={onSubmit}>\r\n        <div className='form-control name-section'>\r\n          <input\r\n            type='text'\r\n            placeholder='Task name'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n          <label className='label'>Add task name</label>\r\n        </div>\r\n        <div className='form-control date-section'>\r\n          <DatePicker\r\n            placeholderText='Select date'\r\n            selected={date}\r\n            onChange={date => setDate(date)}\r\n            dateFormat=\"MMMM d, yyyy\"\r\n          />\r\n          <label className='label'>Date</label>\r\n        </div>\r\n        <div className='form-control time-section'>\r\n          <DatePicker\r\n            placeholderText='Select time'\r\n            selected={time}\r\n            onChange={date => setTime(date)}\r\n            showTimeSelect\r\n            showTimeSelectOnly\r\n            timeIntervals={15}\r\n            timeCaption=\"Time\"\r\n            dateFormat=\"h:mm aa\"\r\n          />\r\n          <label className='label'>Time</label>\r\n        </div>\r\n\r\n        <input type='submit' value='Add Task' className='btn btn-add' />\r\n        {!showLargeScreen && \r\n        <input \r\n          type='button' \r\n          value='Cancel' \r\n          className='btn btn-cancel' \r\n          onClick={onDone}\r\n        />}\r\n      </form>\r\n    </div>)\r\n}\r\n\r\nexport default AddTask","import {FaPlus} from 'react-icons/fa'\r\n\r\nconst ToggleButton = (props) => {\r\n    const {onToggle} = props\r\n\r\n    return (\r\n        <section className=\"toggle-section\" onClick={onToggle}>\r\n            <button \r\n            type='button' \r\n            className=\"btn btn-toggle\" \r\n            onClick={onToggle}>\r\n                <FaPlus style={{\r\n                    textAlign: 'center',\r\n                    color: ' #212529',\r\n                    fontSize: '0.9rem',\r\n                }}/>\r\n            </button>\r\n            <label className=\"description\">Add a task</label>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ToggleButton\r\n","import { FaCheck, FaTrash } from 'react-icons/fa'\r\n\r\nconst Task = (props) => {\r\n    const { task, updateStatus, onDelete } = props\r\n\r\n    const onUpdateStatus = () => {\r\n        updateStatus(task.id)\r\n    }\r\n\r\n    const checkTimeInputs = () => {\r\n        if(task.date && task.time) {\r\n            return `${task.date} at ${task.time}`\r\n        }\r\n        if(task.date && !task.time) {\r\n            return `${task.date}`\r\n        }\r\n        if(!task.date && task.time) {\r\n            return `At ${task.time}`\r\n        }\r\n        return 'No date or time specified'\r\n    }\r\n\r\n    return (\r\n        <div className='task-container'>\r\n            <button className={task.status ? 'btn task-btn-done' : 'btn task-btn'}\r\n                    onClick={onUpdateStatus}>\r\n                <FaCheck className='checkmark-icon'/>\r\n            </button>\r\n            <label className='task-name'>{task.name}</label>\r\n            <label className='task-date'>{checkTimeInputs()} </label>\r\n            <FaTrash className=\"btn delete-btn\" onClick={() => onDelete(task.id)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import { useState } from 'react'\r\nimport { FaAngleDown, FaAngleUp } from 'react-icons/fa'\r\n\r\nimport Task from './Task'\r\n\r\nconst ToggleList = (props) => {\r\n    const { listName, listTitle, noTasksTitle, tasks, updateStatus, onDelete } = props\r\n\r\n    const [showList, setShowList] = useState(false)\r\n\r\n    return (\r\n        <div className={listName}>\r\n            <section className={`list-section`}>\r\n                <h2 className='list-titles'> { listTitle } </h2>\r\n                <button \r\n                className='btn toggle-button' \r\n                onClick={() => setShowList(!showList)}>\r\n                    {showList ? \r\n                    <FaAngleUp className='icon-list'/> : \r\n                    <FaAngleDown className='icon-list'/>}\r\n                </button>\r\n                {showList &&\r\n                <div className='items-section'>\r\n                    {tasks.length > 0 ?\r\n                    tasks.map((task) => {\r\n                        return <Task key={task.id} task={task} updateStatus={updateStatus} onDelete={onDelete}/>\r\n                    }) : <h3 className='done-title'>{noTasksTitle}</h3>}\r\n                </div>}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleList\r\n","import {useState, useEffect} from 'react'\r\n\r\nimport Header from './components/Header'\r\nimport AddTask from './components/AddTask'\r\nimport ToggleButton from './components/ToggleButton'\r\nimport ToggleList from './components/ToggleList'\r\n\r\nfunction App() {\r\n  const [showAddTask, setShowAddTask] = useState(window.innerWidth > 992)\r\n  const [showLargeScreen, setShowLargeScreen] = useState(window.innerWidth > 992)\r\n  const [taskCounter, setTaskCounter] = useState(1)\r\n  const[completedTasks, setCompletedTasks] = useState([])\r\n  const[pendingTasks, setPendingTasks] = useState([])\r\n\r\n  useEffect(() => {\r\n    const data = [\r\n    {id: 1, status:false, name: 'Clean dishes', date:'Apr 5, 2021', time:'10:30 am'},\r\n    {id: 2, status:false, name: 'Send email', date:'Apr 5, 2021', time:'12:30 pm'},\r\n    {id: 3, status:true, name: 'Clean room', date:'Apr 2, 2021', time:'9:30 am'},\r\n    ]\r\n\r\n    var completed = []\r\n    var pending = []\r\n\r\n    data.forEach((task) => {\r\n      task.status ? completed.push(task) : pending.push(task)\r\n    })\r\n\r\n    setTaskCounter(data.length)\r\n    setCompletedTasks(completed)\r\n    setPendingTasks(pending)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', checkWindowSize)\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkWindowSize)\r\n    }\r\n  })\r\n\r\n  const checkWindowSize = () => {\r\n    const size = window.innerWidth > 992\r\n\r\n    setShowAddTask(size)\r\n    setShowLargeScreen(size)\r\n  }\r\n\r\n  // Add new task\r\n  const addTask = (task) => {\r\n    var id = taskCounter + 1\r\n    const status = false\r\n\r\n    setTaskCounter(id)\r\n\r\n    setPendingTasks([...pendingTasks, {id, status, ...task}])\r\n  }\r\n\r\n  // Update status from data\r\n  const onUpdateStatusPending = (id) => {\r\n    setPendingTasks(pendingTasks.filter((task) => {\r\n      if(task.id === id) {\r\n        task.status = !task.status\r\n        setCompletedTasks([...completedTasks, task])\r\n        return null\r\n      }\r\n      return task\r\n    }))\r\n  }\r\n\r\n  // Update status from data\r\n  const onUpdateStatusCompleted = (id) => {\r\n    setCompletedTasks(completedTasks.filter((task) => {\r\n      if(task.id === id) {\r\n        task.status = !task.status\r\n        setPendingTasks([...pendingTasks, task])\r\n        return null\r\n      }\r\n      return task\r\n    }))\r\n  }\r\n\r\n  // Delete pending tasks\r\n  const deletePendingTask = (id) => {\r\n    setPendingTasks(pendingTasks.filter((task) => task.id !== id ))\r\n  }\r\n\r\n  // Delete completed task\r\n  const deleteCompletedTask = (id) => {\r\n    setCompletedTasks(completedTasks.filter((task) => task.id !== id ))\r\n  }\r\n\r\n  // Toggle to opposite state\r\n  const changeFormDisplay = () => {\r\n    setShowAddTask(!showAddTask)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n\r\n      {showAddTask ? \r\n      (<AddTask showLargeScreen={showLargeScreen} onAdd={addTask} onDone={changeFormDisplay}/>) : \r\n      (<ToggleButton onToggle={changeFormDisplay} />)}\r\n\r\n      <ToggleList\r\n        listName={'pending-list'}\r\n        listTitle={'My tasks'}\r\n        noTasksTitle={'You are done for today'}\r\n        tasks={pendingTasks}\r\n        updateStatus={onUpdateStatusPending}\r\n        onDelete={deletePendingTask}/>\r\n      <ToggleList \r\n        listName={'completed-list'}\r\n        listTitle={'Completed'}\r\n        noTasksTitle={'There are no completed tasks'}\r\n        tasks={completedTasks}\r\n        updateStatus={onUpdateStatusCompleted}\r\n        onDelete={deleteCompletedTask}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}